=begin pod

=head1 App::MoarVM::Debug

The interactive MoarVM debugger installs a script called C<raku-remote-debug>
that allows a developer to start a Raku program in debugger mode,
while in another window allows the developer to step through the
program and perform various types of introspection.

=head2 Starting in debugger mode

=begin code

$ raku-remote-debug your-program.raku arg1 arg2

=end code

Starting a program in debugger mode is as simple as replacing C<raku>
by C<raku-remote-debug> on the command line.  That's it.

When it is started this way, it will show a text on STDERR such as:

=begin output

Running with debugging enabled at localhost port 27434

=end output

Your program will not actually execute until you have entered the
C<resume> command in the debugger.

=head2 Starting the debugger

=begin code

$ raku-remote-debug

=end code

To start the debugger, call C<raku-remote-debug> B<without> any arguments.
It will show you a text such as:

=begin output

Welcome to the MoarVM Remote Debugger

Connecting to MoarVM remote on localhost port 27434
success!
> 

=end output

You would typically then set breakpoints or do some introspection.
And then start the program by typing "resume" to lift the suspension
of all threads in the program.

Type "help" in the debugger's CLI to see what commands are available
to you.

=head2 Limitations

The debugger uses a single port to communicate between your program
and the debugger.  By default this is port C<27434>.

This means that on any given computer, only one program can be
debugged this way, and only one debugger can run at the same time.

Should you need to have more debuggers running at the same time,
or for some reason you need to use another port, you can set the
environment variable C<MVM_DEBUG_PORT> to the port you'd like to
use.

To start your program:

=begin code

$ MVM_DEBUG_PORT=4242 raku-remote-debug your-program.raku arg1 arg2

=end code

To start the debugger:

=begin code

$ MVM_DEBUG_PORT=4242 raku-remote-debug

=end code

=head2 Some hints

=item (Optional) Write C<assume thread 1> to assume tracking of
first (main) thread

=item Set a breakpoint

=begin code

> breakpoint "my-script.raku" 1234 1 1

=end code

The string is the filename and C<1234> is the line number (C<1 1>
is the secret ingredient).  Ensure the line number doesn't point
to an empty line.

=item Type C<resume> to run your script.

=item The breakpoint will trigger, you can type C<all lexicals>
to view all lexicals. The numbers shown next to them in bold are
"handle" numbers.

=item Find the object you want to dump and type C<metadata 1234>
(C<1234> is the handle number).

If the features includes C<attributes>, you can enter C<attributes
1234> for this object to get information about the object's attributes.

If the features includes C<positional>, you can enter C<positionals
1234> to get information about the positional elements of the object.

If the features includes C<associative>, you can enter C<associatives
1234> to get information about the associative elements (keys and
values) of the object.

The C<metadata> command is only needed if you don't know which of
these commands is useful for any given type.

=item Type C<help> to see all of the available commands.

=head2 Known Issues

The only stepping mode currently available is Step Into.

Backtraces will show incorrect line numbers.

=head1 AUTHOR

=item Timo Paulssen

Source can be located at: https://github.com/raku-community-modules/App-MoarVM-Debug .
Comments and Pull Requests are welcome.

=head1 COPYRIGHT AND LICENSE

Copyright 2017 - 2020 Edument AB

Copyright 2024 The Raku Community

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
